from numpy import array

ranks = [2948, 3256, 3262, 2955, 2957, 2988, 2830, 5416, 5677, 5766, 5470, 5297, 5478, 6127, 6749, 10430, 10287, 9901, 10972, 10870, 12212, 12465, 13372, 23818, 26239, 30082, 32060, 32791, 34002, 35208, 36329, 36282, 37096, 40635, 56557, 62460, 68979, 71056, 73597, 76138, 11525, 12125, 12547, 13011, 11724, 7482, 6970, 7023, 6982, 11444, 13034, 13541, 12966, 11218, 9244, 4152, 4204, 6889, 7220, 6718, 5838, 5877, 6391, 7040, 7555, 7501, 5168, 5147, 6083, 6085, 5984, 6164, 7266, 7821, 8105, 7786, 8046, 8262, 7997, 5670, 5507, 6918, 7241, 7557, 7889, 8169, 8598, 9469, 9763, 9976, 8267, 8587, 7891, 8117, 8202, 8240, 8944, 9330, 9712, 10114, 10634, 10547, 11018, 11459, 11322, 11641, 11025, 10707, 10328, 10580, 10293, 10048, 10227, 7336, 7945, 8114, 8315, 8655, 8926, 8474, 8737, 8451, 8700, 8955, 8840, 9103, 8766, 8663, 8866, 9147, 9027, 9299, 10373, 12538, 12582, 13170, 10747, 11223, 10732, 11101, 8753, 11561, 11055, 11493, 11123, 11669, 16796, 17586, 16714, 20826, 21333, 21644, 22628, 22724, 25287, 37199, 38478, 42159, 43279, 37986, 34969, 32851, 31922, 31523, 22664, 22603, 22463, 22286, 21805, 22156, 22204, 22295, 20571, 20085, 20080, 20652, 20981, 20481, 20357, 19155, 17541, 16628, 15661, 15611, 12735, 12679, 13159, 13443, 14115, 14021, 13796, 12940, 9373, 5986, 4659, 4673, 4683, 4702, 4747, 4583, 4063, 4145, 4294, 4412, 4599, 4337, 4461, 4574, 4769, 4930, 5040, 5162, 5121, 5210, 5386, 5420, 5618, 5586, 5605, 5873, 5479, 5455, 5431, 5529, 6387, 6908, 7321, 6601, 6470, 6853, 7120, 7062, 7136, 7429, 7486, 7283, 7482, 1767, 1827, 1660, 1708, 1808, 1890, 1900, 1902, 1965, 2062, 3028, 4083, 4370, 6785, 7808, 8169, 8572, 8964, 9350, 9812, 11309, 11297, 11333]
ranks.reverse()


i = 0

p_div = None
p_rank = None

threshold = 10

for offset in range(1, len(ranks)):
	i += 1
	data = ranks[:offset]
	aged = len(data) > 5
	data = data[-4:]
	arrayed = array(data)
	std = arrayed.std()
	rising = 0
	falling = 0
	rank = data[-1]
	if p_div and aged:
		if p_div * 1.1  < std:
			# rising star!
			rising = (std - p_div) / p_div
	if p_rank:
		if p_rank > rank:
			# rank is less
			falling = ((p_rank - rank) / (p_rank * 1.0)) * 100
	
	print "{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}".format(
		i,
		data[-1],
		std,
		rising,
		60000 if rising > threshold*3 else 30000 if rising > threshold else 0,
		60000 if falling > threshold*4 else 30000 if falling > threshold*3 else 0,
		rising,
		falling,
		p_div,
		rank,
		p_rank
	)
	p_div = std
	p_rank = rank

